*************************************l***************************************
* Corbin Rosset README for Homework 1 - Search, Artificial Intelligence.    *
*****************************************************************************
Copyright 2014, Corby Rosset
crosset2@jhu.edu
All rights reserved


--------------------------------------------------------------------------------
1. Introduction and Included Files
--------------------------------------------------------------------------------

* Description of structure: 

   The map.txt file is read and converted into a graph. The graph is comprised of nodes,
   each of which contains pointers to 4 children (up, down, left, right). The nodes
   also contain information about the marginal cost of stepping into that node, the
   the total g(n) cost of getting to that node along the path it is currently connected
   to. Each node also contains a single parent pointer so that the search tree is built
   on top of the graph itself. Each node also contains information about whether it is
   a “blockage” (#), whether it has been entered into a queue (is on the frontier), and
   whether it has been explored/expanded. 

   The SearchAlgorithm abstract class provides an interface and basic scaffolding for 
   all types of search algorithms. The key feature is the 

   public abstract ArrayList<int[]> findGoal();

   method which actually runs the search and returns the list of (x,y) coordinates
   corresponding to the solution, or null if no solution is found. Another pivotal
   function is the 

   protected boolean goalTest(Node<int[]> n)

   method, which provides a universal goalTest against which all nodes can be compared.
   The makePath method in the SearchAlgorithm class is a helper method to follow the
   parent pointers starting from the goal node back up the search tree to the start. 

   The driver, Search.java will call BFS, DFS, and A* search through SearchAlgorithm.
   Furthermore, Search.java is responsible for reading the input symbols from the 
   mapX.txt file, extracting and assembling all useful information each node will need,
   and then calling the GraphProblem constructor to make the graph of nodes and 
   connect them. When reading the characters from the map, it converts them into numbers
   of the set {0, 1, 2, 4}. 0 = block (#), 1 = open (.) w/ cost 1,  2 = open (,) 
   with cost 2, start = 3, goal = 4.

   Also note that the code uses lots of assert statements because if/else and custom
   exception classes are too much clutter. The asserts are only activated if you 
   run the flag

   -enableassertions

   flag like so:

   java -ea Search ../data/map1.txt 1

   So you may edit run.sh to show that the assertions all check out. Otherwise, it’s like
   they aren’t even there. 

   I also included a toString method in the Graph class that will output the graph is such a way that it
   can be rendered by a pdf via GraphViz software. Just put the output of the toString method into a
 
   myGraph.dot 

   file, and to compile it run 

   dot -Tps myGraph.dot -o outfile.ps

   and then open the .ps file. Please see http://www.graphviz.org/Documentation.php for more information.

* Included Files: 


** under src/ directory:

   AStarSearch.java - the A* search class implementation, extends SearchAlgorithm
   Graph.java - the general Graph class that contains all nodes and their children
   Makefile - the makefile that compiles .java files into the /bin directory
   Search.java - the main driver program that accepts input and initiates search
   BreadthFirstSearch.java - the BFS implementation, extends SearchAlgorithm
   GraphProblem.java - a class that contains useful info for solving a search problem
   Node.java - the node class, contains many relevant getter/setter methods
   SearchAlgorithm.java - the abstract class from which all algorithms inherit methods
   DepthFirstSearch.java - DFS implementation.
   NodeComparator.java - the heuristic used by the priority queue in A*


** Note: under /doc there exists the write up document, saved as Homework1WriteUp.pdf,
   along with the supporting hw1.tex file. 


--------------------------------------------------------------------------------
2. Usage and Run Commands
--------------------------------------------------------------------------------

All code resides in the src/ subdirectory, which also contains a Makefile that
can build and run the code.  As a convenience, the top level directory also
contains shellscripts which call `make`. Please cd to the top level and use

./compile.sh

to compile the java code. Then use

./run.sh ../data/mapX.txt <num>

Where X is an integer on the inclusive range [1,9] which specifies the map (I made 
another test map, map9.txt). NOTE: you must put “../data/“ because from the perspective 
of the MAKEFILE, the maps are one directory above. The final argument, <num>, is a number
on [1, 3] where 1 = run BFS, 2 = run DFS, 3 = run A*. No problem instance should take
longer than 15 seconds to run, and no infinite loops are ever followed. Note about 5
to 8 seconds are needed to actually make the graph and initialize the problem for 
the map6.txt. 

There is a runTests shell script to automatically run all the tests and log them in the 
output/ directory. Please run:

./runTests.sh >output/output.txt

and then explore /output/output.txt for the results. **DO NOT RUN THIS** unless you want the 
concise results that are already written in output.txt to be overwritten with the long and
annoying backtracked path the algorithm took (which is 1000’s of lines long).

To make the javadocs you must
cd to the src/ directory and then run

make docs

And the documentation will be placed in the /doc directory. You can also print out the
path that the algorithm took to the goal node. Uncomment line 59 in Search.java to 
activate the printSolutionsOnGraph() method. Remember to re-compile the code. 

You can also uncomment lines 


--------------------------------------------------------------------------------
3. Reflections
--------------------------------------------------------------------------------

This assignment was long. It was tedious. It was instructive, but it would be 
better if we had gotten the graph framework and input-reading framework, because
anyone can do that and it just takes time. I would much rather spend time working
with different heuristics (and debugging my own!!) than implementing Graph.java
which is so 600.226. I must have spent more than 20 hours on this assignment, and 
I’m not particularly happy about it. Maybe in the future give students much more
supporting framework, but require implementing more algorithms, which is the point
of the course anyway.
--------------------------------------------------------------------------------
3. Discussion and interesting notes
--------------------------------------------------------------------------------

There was an enormous bug in the way that keys were updated in the priority queue
for A* search. There is no updateKey() method for java’s PriorityQueue, so just
changing the f(n) value for a node does not actually change its position in the 
PQ. Instead, the node must be removed, its key updated, and then reinsert the 
node back into the PQ. See lines 89-99 in AStarSearch.java under src/. So after
that, then A* search was correct. 

In trying to find a solution to this bug, I was wrongly convinced that the heuristic
in the NodeComparator class was to blame, because the algorithm was finding an 
“optimal” cost of 9541 for the path from the start to the goal in map6.txt instead
of the correct cost of 9499. When I printed the suboptimal path the algorithm was 
taking, it was clear it was making slight deviations, so it was some kind of 
off-by-one error. The algorithm was on a diagonal path to the goal and then it
would slip left a space and then fall back into line again, so I thought the issue
was some kind of x-axis alignment problem, which is why I forced the heuristic
to first evaluate the x-displacement from the goal. And when the x-displacement is
zero, then let it run without anymore predictions about h(n). This worked, but then
I realized that the priority queue was actually to blame, which made sense because
even though f(n)’s were updated by the A* algorithm, the actual keys the priority 
queue uses were not, so the algorithm “accidentally” stepped in the direction of 
one of the children nodes it explored, even though a shorter path was found already.

Anyway, the modified manhattan heuristic still excels in finding a good path even when
the algorithm works perfectly. To see for yourself, just run the code! the comparator
automatically implements my modified heuristic, but in lines 66-76 of NodeComparator.java
it implements regular manhattan heuristic. Uncomment that code if you want to see. 
Remember to re-compile. 
